// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using amldata.Data;

namespace amldata.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210909091237_opp")]
    partial class opp
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("amldata.Models.CTR", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AUTHORIZED")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount_local")
                        .HasColumnType("float");

                    b.Property<double>("BALANCE")
                        .HasColumnType("float");

                    b.Property<string>("BENEFICIARY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BENEFICIARY_COMMENT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CLOSED")
                        .HasColumnType("datetime2");

                    b.Property<string>("From_funds_code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("INCP_DATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("INC_ADDRESS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("INC_BUSINESS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("INC_COUNTRY_CODE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("INC_DIR_FIRSTNAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("INC_DIR_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("INC_DIR_LASTNAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("INC_EMAIL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("INC_NO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("INC_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("INC_PHONE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("INC_STATE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Late_Deposit")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OPENED")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SIGN_DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("SIGN_FIRSTNAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SIGN_LASTNAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SIGN_TITLE")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("SSN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("STATUS_CODE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TAX_NUMBER")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TELLER")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TRANSACTION_DATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("TRANSACTION_LOCATION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TRANSACTION_NUMBER")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("T_Comm_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("T_Contact_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("T_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("account_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("branch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTime>("date_posting")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("foreign_amount")
                        .HasColumnType("float");

                    b.Property<string>("foreign_ex_rate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("from_Account")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("from_account_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("from_country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("from_currency_code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("from_first_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("from_foreign_currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("from_funds_comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("from_institution_code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("from_institution_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("from_last_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("non_bank_inst")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("residence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("source_of_wealth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("swift")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("to_account")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("to_country_code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("to_foreign_currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("to_funds_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("to_funds_comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("to_institution_code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("to_institution_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("trans_conductor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("transaction_desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("transaction_mode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CTR");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
